require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/topics", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Topic. As you add validations to Topic, be sure to
  # adjust the attributes here as well.
  let(:admin) { create(:admin, permission: 'Full_control_on_Topic') }
  let(:user) { create(:user, function: admin) }

  let(:valid_attributes) {
    {
      title: 'Topic Title Test',
      img_url: 'http://topic.png',
      content: 'The content of topic',
      author: admin
    }
  }

  let(:invalid_attributes_title_empty) {
    {
      title: '',
      img_url: 'http://topic.png',
      content: 'The content of topic',
      author: admin
    }
  }

  let(:invalid_attributes_content_empty) {
    {
      title: 'Topic Title Test',
      img_url: 'http://topic.png',
      content: '',
      author: admin
    }
  }

  before do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      Topic.create! valid_attributes
      get topics_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      topic = Topic.create! valid_attributes
      get topic_url(topic)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_topic_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      topic = Topic.create! valid_attributes
      get edit_topic_url(topic)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Topic" do
        expect {
          post topics_url, params: { topic: valid_attributes }
        }.to change(Topic, :count).by(1)
      end

      it "redirects to the created topic" do
        post topics_url, params: { topic: valid_attributes }
        expect(response).to redirect_to(topic_url(Topic.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Topic with an empty title" do
        expect {
          post topics_url, params: { topic: invalid_attributes_title_empty }
        }.to change(Topic, :count).by(0)
      end

      it "does not create a new Topic with an empty content" do
        expect {
          post topics_url, params: { topic: invalid_attributes_content_empty }
        }.to change(Topic, :count).by(0)
      end

      it "does not create a new Topic while not logged in" do
        delete destroy_user_session_path  # Perform sign-out

        expect {
          post topics_url, params: { topic: valid_attributes }
        }.to change(Topic, :count).by(0)
      end

    
      it "renders a response with 422 status" do
        post topics_url, params: { topic: invalid_attributes_title_empty }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    let(:topic) { Topic.create! valid_attributes }

    let(:new_attributes) {
      {
        title: 'Change Topic Title Test',
        img_url: 'http://topic_change.png',
        content: 'Change The content of topic',
        author: admin
      }
    }

    context "with valid parameters" do
      it "updates the requested topic" do
        patch topic_url(topic), params: { topic: new_attributes }
        topic.reload
        expect(topic.title).to eq("Change Topic Title Test")
        expect(topic.content).to eq("Change The content of topic")
      end

      it "redirects to the topic" do
        patch topic_url(topic), params: { topic: new_attributes }
        topic.reload
        expect(response).to redirect_to(topic_url(topic))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status" do
        patch topic_url(topic), params: { topic: invalid_attributes_title_empty }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested topic" do
      topic = Topic.create! valid_attributes
      expect {
        delete topic_url(topic)
      }.to change(Topic, :count).by(-1)
    end

    it "redirects to the topics list" do
      topic = Topic.create! valid_attributes
      delete topic_url(topic)
      expect(response).to redirect_to(topics_url)
    end
  end
end
